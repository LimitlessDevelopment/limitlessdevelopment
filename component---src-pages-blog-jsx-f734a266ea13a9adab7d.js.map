{"version":3,"sources":["webpack:///./src/components/CategoriesBlock.jsx","webpack:///./src/pages/blog.jsx"],"names":["CatContainer","Object","styled_base_browser_esm","target","name","styles","OuterrContainer","CategoriesBlock","_ref","list","core_browser_esm","map","tag","style","title","propTypes","PropTypes","array","Category","Blog","edges","data","blogs","layouts","components_CategoriesBlock","Helmet_default","a","_ref2","node","components","key","id","cover","frontmatter","childImageSharp","fluid","path","date","tags","excerpt","shape","allMarkdownRemark","arrayOf","string","object","isRequired","query"],"mappings":"gLAKMA,EAAeC,OAAAC,EAAA,EAAAD,CAAA,OAAHE,OAAA,YAAGF,CAAH,CAAAG,KAAA,UAAAC,OAAA,2EAmBZC,EAAkBL,OAAAC,EAAA,EAAAD,CAAA,OAAHE,OAAA,YAAGF,CAAH,CAAAG,KAAA,UAAAC,OAAA,iBAKfE,EAAkB,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACtBR,OAAAS,EAAA,EAAAT,CAACD,EAAD,KACGS,GACCA,EAAKE,IAAI,SAAAC,GAEP,OACEX,OAAAS,EAAA,EAAAT,CAACK,EAAD,CAAiBO,MAAQ,IACxBD,EAAIE,WAOAP,IAEfA,EAAgBQ,UAAY,CAC1BN,KAAMO,IAAUC,2CCrClB,IAAMC,EAAWjB,OAAAC,EAAA,EAAAD,CAAA,OAAHE,OAAA,YAAGF,CAAH,CAAAG,KAAA,UAAAC,OAAA,iFASRc,EAAO,SAAAX,GAAc,IACjBY,EADiBZ,EAAXa,KACSC,MAAfF,MACR,OACEnB,OAAAS,EAAA,EAAAT,CAACsB,EAAA,EAAD,KACJtB,OAAAS,EAAA,EAAAT,CAACiB,EAAD,KACMjB,OAAAS,EAAA,EAAAT,CAACuB,EAAD,CAAiBf,KAAMW,KAEvBnB,OAAAS,EAAA,EAAAT,CAACwB,EAAAC,EAAD,CAAQZ,MAAO,WAEdM,EAAMT,IAAI,SAAAgB,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OAET3B,OAAAS,EAAA,EAAAT,CAAC4B,EAAA,EAAD,CAEEC,IAAKF,EAAKG,GACVC,MAAOJ,EAAKK,YAAYD,MAAME,gBAAgBC,MAC9CC,KAAMR,EAAKK,YAAYG,KACvBtB,MAAOc,EAAKK,YAAYnB,MACxBuB,KAAMT,EAAKK,YAAYI,KACvBC,KAAMV,EAAKK,YAAYK,KACvBC,QAASX,EAAKW,cAQTpB,YAEfA,EAAKJ,UAAY,CACfM,KAAML,IAAUwB,MAAM,CACpBC,kBAAmBzB,IAAUwB,MAAM,CACjCpB,MAAOJ,IAAU0B,QACf1B,IAAUwB,MAAM,CACdZ,KAAMZ,IAAUwB,MAAM,CACpBD,QAASvB,IAAU2B,OACnBV,YAAajB,IAAUwB,MAAM,CAC3BR,MAAOhB,IAAU4B,OAAOC,WACxBT,KAAMpB,IAAU2B,OAAOE,WACvB/B,MAAOE,IAAU2B,OAAOE,WACxBR,KAAMrB,IAAU2B,OAAOE,WACvBP,KAAMtB,IAAUC,YAGnB4B,iBAMJ,IAAMC,EAAK","file":"component---src-pages-blog-jsx-f734a266ea13a9adab7d.js","sourcesContent":["import React from 'react';\n//import { Link } from 'gatsby';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\nconst CatContainer = styled.div`\n  margin: 1rem 0;\n  display: flex;\n  flex-direction: column;\n  //flex-wrap: unwrap;\n  justify-content: left;\n  // a {\n  //   //margin: 0 1rem 1rem 0;\n  //   color: ${props => props.theme.colors.black.blue};\n  //   padding-left: 10rem;\n  //   background: ${props => props.theme.colors.white.grey};\n  //   border-radius: 10px;\n  //   &:hover {\n  //     color: ${props => props.theme.colors.white.light};\n  //     background: ${props => props.theme.colors.primary.light};\n  //     border: ${props => props.theme.colors.primary.light};\n  //   }\n  // }\n`;\nconst OuterrContainer = styled.div`\nborder: 40px;\n`;\n\n\nconst CategoriesBlock = ({ list }) => (\n  <CatContainer>\n    {list &&\n      list.map(tag => {\n        //const upperTag = tag.title;  \n        return (\n          <OuterrContainer style= {{ }}>\n          {tag.title}\n          </OuterrContainer>\n        );\n      })}\n  </CatContainer>\n);\n\nexport default CategoriesBlock;\n\nCategoriesBlock.propTypes = {\n  list: PropTypes.array,\n};\n\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { BlogList } from 'components';\nimport { Layout } from 'layouts';\nimport  CategoriesBlock  from 'components/CategoriesBlock';\nimport styled from '@emotion/styled';\n\nconst Category = styled.div`\ndisplay: flex;\n\njustify-content: space-between;\npadding: 0% 0 2% 0;\n//background: ${props => props.theme.colors.black.blue};\nfont-size: 2rem;\n`;\nvar filt;\nconst Blog = ({ data }) => {\n  const { edges } = data.blogs;\n  return (\n    <Layout>\n<Category>\n      <CategoriesBlock list={edges} />\n</Category>\n      <Helmet title={'Bddlog'} />\n      {/* <Header title=\"Blog Page\">Gatsby Tutorial Starter</Header> */}\n      {edges.map(({ node }) => (\n\n        <BlogList\n\n          key={node.id}\n          cover={node.frontmatter.cover.childImageSharp.fluid}\n          path={node.frontmatter.path}\n          title={node.frontmatter.title}\n          date={node.frontmatter.date}\n          tags={node.frontmatter.tags}\n          excerpt={node.excerpt}\n        />\n      ))}\n      \n    </Layout>\n  );\n};\n\nexport default Blog;\n\nBlog.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            excerpt: PropTypes.string,\n            frontmatter: PropTypes.shape({\n              cover: PropTypes.object.isRequired,\n              path: PropTypes.string.isRequired,\n              title: PropTypes.string.isRequired,\n              date: PropTypes.string.isRequired,\n              tags: PropTypes.array,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n};\n\nexport const query = graphql`\n  query {\n    blogs: allMarkdownRemark(\n      filter: { fileAbsolutePath: { glob: \"**/blogs/**/*.md\" } }\n      sort: { order: DESC, fields: frontmatter___date }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            path\n            date\n            title\n            cover {\n              childImageSharp {\n                fluid(\n                  maxWidth: 1000\n                  quality: 90\n                  traceSVG: { color: \"#2B2B2F\" }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}