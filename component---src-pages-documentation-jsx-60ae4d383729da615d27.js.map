{"version":3,"sources":["webpack:///./src/components/DocsList.jsx","webpack:///./src/pages/documentation.jsx","webpack:///./src/components/CategoriesBlock.jsx"],"names":["Wrapper","Object","styled_base_browser_esm","target","name","styles","Image","TitleLink","RightBlock","props","theme","colors","black","lighter","transitions","default","duration","DocsList","_ref","path","cover","title","core_browser_esm","layouts","gatsby_browser_entry","to","gatsby_image_default","a","fluid","style","color","propTypes","PropTypes","object","isRequired","string","Header","BlogPosts","blue","Fwarp","ContainerWrapper","Documentation","edges","data","docs","Helmet_default","map","_ref2","node","components_DocsList","key","id","frontmatter","childImageSharp","date","excerpt","shape","allMarkdownRemark","arrayOf","tags","array","query","CatContainer","_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__","OuterrContainer","CategoriesBlock","list","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","tag"],"mappings":"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","file":"component---src-pages-documentation-jsx-60ae4d383729da615d27.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport Img from 'gatsby-image';\n\nimport { Container } from 'layouts';\n\n\nconst Wrapper = styled.article`\n  //margin: 0 10rem;\ndisplay: flex;\njustify-content: stretch;\nwidth:80vw;\nborder: 1px solid #e5e5e5;\nbox-shadow: 0 .5px 0 0 #ffffff inset, 0 2px 2px 0 #e0d9d9;\n@media (max-width: 800px) {\n  flex-direction: column;\n  padding-bottom: 10%;\n  box-shadow: 0 0.5px 0 0 #ffffff inset, 0 2px 2px 0 #e0d9d9;\n  //border-radius: 1rem;\n  width:100vw;\n  z-index: 0;\n}\nbackground: #FFF;\n//box-shadow: 0 4px 120px rgba(0,0,0,0.1);\ntransition: 0.1s;\n//position:relative;\n//z-index:10;\n&:hover {\n  \n  //box-shadow: 0 5px 35px 0px rgba(0,0,0,.1);\n  //box-shadow: 0 4px 120px rgba(0,0,0,0.1);\n  //box-shadow: 0 1px #FFFFFF inset, 0 1px 3px rgba(34, 25, 25, 0.4);\n  box-shadow: 0 0.5px 0 0 #ffffff inset, 0 2px 2px 0 #e0d9d9;\n\n  transform: scale(1.02);\n  //background: #f2edec;\n  //border-radius: 1rem;\n}\n`;\n\nconst Image = styled.div`\n  //margin: 2rem 2rem;\n  //display:flex;\n  //position: relative;\n  //align-self: center;\n  //box-shadow: ${props => props.theme.shadow.feature.small.default};\n  //transition: ${props => props.theme.transitions.boom.transition};\n  //border-radius: ${props => props.theme.borderRadius.default};\n  height: 5rem;\n  .gatsby-image-wrapper {\n    //border-radius: ${props => props.theme.borderRadius.default};\n    object-fit: contain;\n    //position: relative;\n    //margin-left: auto;\n          margin-right: auto;\n           width: 5rem;\n           height: 5rem;\n          //top: 2.5rem;\n  }\n\n  //flex-basis: 20rem;\n  \n  //max-width: 100%;\n  //width: 10rem;\n  //height: 100%;\n  //object-fit: contain;\n\n  // @media (max-width: 800px) {\n  //   flex-basis: 100%;\n  //   max-width: 100%;\n  //   width: 100%;\n  //   margin-bottom: 1.5rem;\n  // }\n  // @media (max-width: 500px) {\n  //   min-height: 200px;\n  // }\n`;\nconst TitleLink = styled.div`\ndisplay: flex;\nalign-self:center;\njustify-content:center;\nflex-basis: 100vw;\npadding-left: 2%;\n\n@media (max-width: 800px) {\n  padding-top: 0%;\n  padding-bottom: 0%;\n}\n`;\nconst Title = styled.h1`\n  //margin: 0;\n`;\nconst LeftBlock = styled.div`\ndisplay: flex;  \njustify-content:center;\nflex-direction: column;\npadding: 2%;\nmin-width: 50%;\nmargin-bottom: 1rem;\n  h1 {\n    font-size: 2rem;\n    display: inline-block;\n    color: ${props => props.theme.colors.black.lighter};\n    transition: all ${props => props.theme.transitions.default.duration};\n    &:hover {\n      //color: ${props => props.theme.colors.primary.base};\n    }\n  }\n  text-align: center;\n`;\nconst RightBlock = styled.div`\ndisplay: flex;  \n//padding: 2%;\n//justify-content:center;\nflex-direction: row;\n//min-width: 50%;\n//margin-bottom: 1rem;\n//text-align: center;\n`;\nconst DocsList = ({ path, cover, title }) => (\n  <Container>\n    <Wrapper>\n    <RightBlock>\n      <Image>\n        <Link to={path} title={title}>\n          <Img fluid={cover} />\n        </Link>\n      </Image>\n      {/* <Date>{date}</Date> */}\n\n   \n           <TitleLink>\n        <Link style = {{color:\"#2b2523\"}} to={path}>\n          {title}</Link>\n        </TitleLink>\n        {/* <Information>\n\n        {excerpt}     \n\n         </Information> */}\n      </RightBlock>  \n    </Wrapper>\n  </Container>\n);\n\nexport default DocsList;\n\nDocsList.propTypes = {\n  cover: PropTypes.object.isRequired,\n  path: PropTypes.string.isRequired,\n  //excerpt: PropTypes.string,\n  //date: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  //tags: PropTypes.array.isRequired,\n};\n","import React,{ useState } from 'react';\nimport { graphql } from 'gatsby';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport  DocsList from 'components/DocsList';\nimport { Layout } from 'layouts';\nimport  CategoriesBlock  from 'components/CategoriesBlock';\nimport styled from '@emotion/styled';\nimport { Link } from 'gatsby';\n\n\nconst Header = styled.div`\ndisplay: flex;\n padding-bottom: 2%;\n padding-top: 5%;\n// z-value: 200;\njustify-content: center;\n//padding: 0% 0 2% 0;\n//background: ${props => props.theme.colors.black.blue};\nfont-size: 2rem;\n\n@media (max-width: 800px) {\n    padding-top: 15%;\n    padding-bottom: 5%;\n  }\n`;\nconst BlogPosts = styled.div`\ndisplay: flex;\nposition: relative ;\n//grid-gap: 5px;\n//padding-top: 5%;\nflex-direction: column;\n\nmargin: auto;\n//width: 80vw;\n\n\nbackground: ${props => props.theme.colors.black.blue};\nbox-shadow: 0 4px 120px rgba(0,0,0,0.1);\n\n//font-size: 2rem;\n\n@media (max-width: 800px) {\n//width: 95vw;\n\n  }\n`;\n\nconst Fspace = styled.div`\n//display: flex;\nheight:1rem;\nbackground: white;\nmin-height:25rem;\n@media (max-width: 800px) {\n    // padding-top: 10%;\n    // padding-bottom: 5%;\n    min-height:14rem;\n  }\n  @media (max-width: 300px) {\n    min-height:10rem;\n  }\n\n`;\nconst Fwarp = styled.div`\ndisplay: flex;\nflex-direction: column;\n//height:20%;\n\n@media (max-width: 800px) {\n    // padding-top: 10%;\n    // padding-bottom: 5%;\n  }\n`;\nconst ContainerWrapper = styled.div`\nposition: relative;\ndisplay: flex;\njustify-content:center;\n\n//top:-5rem;\n// overflow:hidden;\n//   grid-template-rows: 1fr 1fr;\n//   grid-template-columns: 1fr;\n//   grid-template-areas: \n//   \"a\"\n//   ;\n//   grid-auto-flow: dense; \n@media (max-width: 800px) {\n  //grid-template-rows: 1fr;\n  }\n`;\nconst Documentation = ({ data }) => {\n  const { edges } = data.docs;\n  //var karr = edges.filter(({node}) => node.frontmatter.category == ono)\n  \n\n  return (\n    <Layout>\n      <Header>\n      Documentation\n      </Header>\n      <Helmet title={'Limitless Documentations'} />\n      <ContainerWrapper>\n     \n      <BlogPosts>\n      {        \n        edges.map(({ node }) => (\n<Fwarp>\n        <DocsList\n          key={node.id}\n          cover={node.frontmatter.cover.childImageSharp.fluid}\n          path={node.frontmatter.path}\n          title={node.frontmatter.title}\n          date={node.frontmatter.date}\n          //tags={node.frontmatter.tags}\n          excerpt={node.excerpt}\n        />\n\n</Fwarp>\n      ))\n      }      \n      </BlogPosts>\n      </ContainerWrapper>\n      {/* <Fspace/> */}\n    </Layout>\n  );\n};\n\nexport default Documentation;\n\nDocumentation.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            excerpt: PropTypes.string,\n            frontmatter: PropTypes.shape({\n              cover: PropTypes.object.isRequired,\n              path: PropTypes.string.isRequired,\n              title: PropTypes.string.isRequired,\n              date: PropTypes.string.isRequired,\n              tags: PropTypes.array,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n};\n\nexport const query = graphql`\n  query {\n    docs: allMarkdownRemark(\n      filter: { fileAbsolutePath: { glob: \"**/docs/**/*.md\" }frontmatter: { published: { eq: false} } }\n      sort: { order: DESC, fields: frontmatter___date }\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 500)\n          frontmatter {\n            path\n            date\n            title\n            cover {\n              childImageSharp {\n                fluid(\n                  maxWidth: 200\n                  quality: 70\n                  traceSVG: { color: \"#2B2B2F\" }\n                ) {\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\n//import { Link } from 'gatsby';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\nconst CatContainer = styled.div`\n  margin: 1rem 0;\n  display: flex;\n  flex-direction: column;\n  //flex-wrap: unwrap;\n  justify-content: left;\n  // a {\n  //   //margin: 0 1rem 1rem 0;\n  //   color: ${props => props.theme.colors.black.blue};\n  //   padding-left: 10rem;\n  //   background: ${props => props.theme.colors.white.grey};\n  //   border-radius: 10px;\n  //   &:hover {\n  //     color: ${props => props.theme.colors.white.light};\n  //     background: ${props => props.theme.colors.primary.light};\n  //     border: ${props => props.theme.colors.primary.light};\n  //   }\n  // }\n`;\nconst OuterrContainer = styled.div`\nborder: 40px;\n`;\n\n\nconst CategoriesBlock = ({ list }) => (\n  <CatContainer>\n    {list &&\n      list.map(tag => {\n        //const upperTag = tag.title;  \n        return (\n          <OuterrContainer style= {{ }}>\n          {tag.title}\n          </OuterrContainer>\n        );\n      })}\n  </CatContainer>\n);\n\nexport default CategoriesBlock;\n\nCategoriesBlock.propTypes = {\n  list: PropTypes.array,\n};\n\n"],"sourceRoot":""}