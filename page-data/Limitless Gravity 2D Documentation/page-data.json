{"componentChunkName":"component---src-templates-doc-jsx","path":"/Limitless Gravity 2D Documentation/","result":{"data":{"markdownRemark":{"html":"<h3><strong><a href=\"https://u3d.as/1zaZ\">Limitless Gravity 2D</a></strong> allows you to apply customizable gravitational effects on 2D Rigidbodies in your Unity scene.  With its flexibility and advanced features, you can easily simulate realistic gravitational effects, whether for platformer games, space simulations, or other creative projects.</h3>\n<hr>\n<details>\n<h3><summary><strong>Table of Contents</strong></summary></h3>\n<ul>\n<li><a href=\"#id0\">Quick Start</a></li>\n<li><a href=\"#id1\">Getting Started</a></li>\n<li><a href=\"#id2\">Tabs</a>\n<ul>\n<li><a href=\"#id21\">Main</a></li>\n<li><a href=\"#id22\">Targets</a></li>\n<li><a href=\"#id23\">Tools</a></li>\n</ul>\n</li>\n<li><a href=\"#id3\">Helpers</a></li>\n<li><a href=\"#id4\">Triggers</a></li>\n<li><a href=\"#id5\">Example Scenes</a></li>\n<li><a href=\"#id6\">Code API</a></li>\n</ul>\n</details>\n<hr>\n<h2 id=\"id0\"><strong>Quick Start Guide :</strong></h2>\n<ol>\n<li><mark>Ensure Your Scene Has Rigidbody2D.</mark> <br/></li>\n</ol>\n<blockquote>\n<p>Make sure your scene contains GameObjects with the Rigidbody2D component attached. <br/>These objects will be affected by the Gravity2D system.</p>\n</blockquote>\n<ol start=\"2\">\n<li><mark>Add the Gravity2D Component.</mark><br/></li>\n</ol>\n<blockquote>\n<p>To introduce gravity to your scene, add the Gravity2D component to a new GameObject by navigating to:</p>\n</blockquote>\n<p><mark>Tools -> LimitlessGravity2D -> Gravity 2D</mark> in the Unity Editor.</p>\n<ol start=\"3\">\n<li><mark>Configure Targets in the 'TARGETS' Tab.</mark><br/></li>\n</ol>\n<blockquote>\n<p>In the Gravity2D component, go to the 'TARGETS' tab. Here, you’ll need to define the objects that will be affected by gravity.<br/></p>\n</blockquote>\n<p>To affect all objects within the Gravity2D range:</p>\n<blockquote>\n<ul>\n<li>Click 'Add Target Type'</li>\n<li>Select 'Layermask'</li>\n</ul>\n</blockquote>\n<ol start=\"4\">\n<li><mark>Set Up the Gravity Force in the 'MAIN' Tab.</mark><br/></li>\n</ol>\n<blockquote>\n<p>Now, navigate to the 'MAIN' tab of the Gravity2D component.</p>\n<ul>\n<li>Adjust the Gravity Radius to define the area where the gravity effect will be active.</li>\n<li>Configure the Gravity Force. You can set this value to be positive (attracting objects) or negative (repelling objects).</li>\n</ul>\n</blockquote>\n<ol start=\"5\">\n<li><mark>Enter Playmode and Explore.</mark><br/></li>\n</ol>\n<blockquote>\n<p>Once your setup is complete, hit Playmode to see the effects of Gravity2D on the GameObjects in your scene. Tweak and experiment with various Gravity2D parameters.</p>\n</blockquote>\n<ol start=\"6\">\n<li><mark>Explore Advanced Settings.</mark><br/></li>\n</ol>\n<blockquote>\n<p>After the initial setup, dive deeper into the vast array of features and parameters available in the Gravity2D component to customize and fine-tune gravitational forces.</p>\n</blockquote>\n<h2>Now you're ready to start! Learn more about each parameter and advanced features below in this documentation.</h2>\n<hr>\n<h2 id=\"id1\"><strong>Getting Started:</strong></h2>\n<blockquote>\n<h3>The core component is called Gravity 2D. You can add Gravity2D component with 3 ways.</h3>\n<ul>\n<li><mark> Add Gravity2D component from the Unity menu Tools->LimitlessGravity2D -> Gravity 2D </mark> <br/> <img src=\"https://github.com/LimitlessDevelopment/example_gifs/blob/main/Screenshot%202024-10-08%20101417.png?raw=true\" alt=\"Sonny and Mariel high fiving.\"></li>\n<li><mark>In the Hierarchy right click and go to 2D Object -> Gravity 2D </mark><br/> <img src=\"https://github.com/LimitlessDevelopment/example_gifs/blob/main/2222.png?raw=true\" alt=\"Sonny and Mariel high fiving.\"></li>\n<li><mark>click Add Component and select LimitlessGravity2D -> Gravity 2D</mark> <br/> <img src=\"https://github.com/LimitlessDevelopment/example_gifs/blob/main/33333.png?raw=true\" alt=\"Sonny and Mariel high fiving.\"></li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"id2\"><strong>Tabs:</strong></h2>\n<h3>Gravity 2D component have 3 tabs:</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><ul><li><a href=\"#id21\"><code class=\"language-csharptext\">MAIN</code></a> Core area where you configure the key settings.</li><li><a href=\"#id22\"><code class=\"language-csharptext\">TARGETS</code></a> Define specific target settings. For example you can select Layermask target and select \"everything\". All object in bounds of Gravity2D component will be affected.</li><li><a href=\"#id23\"><code class=\"language-csharptext\">TOOLS</code></a> Allows you to monitor and visualize how the Gravity2D is affecting GameObjects.</li></ul></td>\n<td><img src=\"https://github.com/LimitlessDevelopment/example_gifs/blob/main/gravity_tabs.gif?raw=true\" alt=\"Sonny and Mariel high fiving.\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"id21\"><strong>MAIN</strong></h2>Here you can find all main properties\n<table>\n<thead>\n<tr>\n<th><mark>Main</mark></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-csharptext\">Enable</code></td>\n<td>A boolean that enables or disables the Limimtless Gravity 2D.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Disable Unity's Gravity</code></td>\n<td>Compensate the built-in Unity's gravity system</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Limit affected colliders</code></td>\n<td>Limit affected colliders to any amount. You can debug colliders count in 'Tools' tab</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Limit Count</code></td>\n<td>Maximum amount of affected colliders. You can debug colliders count in 'Tools' tab</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Form</code> <ul><li>Sphere.</li><li>Box.</li><li>Raycast.</li></ul></td>\n<td>This setting defines the shape of the gravitational field.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Radius</code></td>\n<td>Radius of the force when Sphere shape is selected.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Size</code></td>\n<td>Box size of the force when Box shape is selected.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Distance</code></td>\n<td>Distance of the force when Raycast shape is selected.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><mark> Force </mark></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-csharptext\">Type</code> <ul><li>Force &#x26; Torque.</li><li>Force.</li><li>GravitationalAttraction.</li><li>Velocity.</li><li>AngularVelocity.</li><li>Torque.</li></ul></td>\n<td><ul><li>Apply torque and force simultaneously to objects.</li><li>Adds a force to the objects.</li><li>Gravitation force based on Newton's law of universal gravitation.</li><li>Adds velocity to the objects.</li><li>Adds angular velocity to the objects.</li><li>Adds a torque to the objects.</li></ul></td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Mode</code> <ul><li>Force.</li><li>Impulse.</li></ul></td>\n<td>Define whether the gravitational force is continuous (Force) or applied instantly (Impulse).</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Force right</code></td>\n<td>Force direction will be applied in transform.right direction.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Amount</code></td>\n<td>Amount of the force, can be negative or positive.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Velocity damping</code></td>\n<td>Damps current velocity of the effected rigidbodys.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Angular Velocity damping</code></td>\n<td>Damps current angular velocity of the effected rigidbodys.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Lerp velocity</code></td>\n<td>Force direction will be applied in transform.right direction.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><mark>Position</mark></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-csharptext\">Force Origin Point</code> <ul><li>Transform.</li><li>Nearest Collider.</li></ul></td>\n<td>Defines Point of Force Application: </br> Uses this object's transform as Origin point. </br> Uses the nearest collider as the origin point.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Nearest Colliders list</code></td>\n<td>The Gravity2D system dynamically selects the nearest collider and uses it as the origin point.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Height offset</code></td>\n<td>Defines how high target objects will hover above the nearest collider.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Enable gravity offset</code></td>\n<td>Enable gravity offset.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Offset</code></td>\n<td>Adjusts the position of the gravity source relative to the object's transform.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Enable inner gravity offset</code></td>\n<td>Enable inner gravity offset.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Inner Offset</code></td>\n<td>Offsets the gravity center, allowing you to move the point from where the gravity force is emitted.</td>\n</tr>\n</tbody>\n</table>\n <h2 id=\"id22\"><strong>TARGETS</strong></h2>\n<blockquote>\n<p>To set up Gravity2D to work effectively, you must define specific target settings. These target settings determine which objects in the scene will be affected by the Gravity2D component. There are five types of targets that you can configure.</p>\n</blockquote>\n<blockquote>\n<p>In the Gravity2D component, locate the Target Settings section.</p>\n</blockquote>\n<p>Click on the Add Target button.\nA drop-down menu will appear, letting you choose between the following target types:</p>\n<blockquote>\n<ul>\n<li>GameObjects: You can add specific GameObjects that should be affected by gravity.</li>\n<li>Tags: Objects with specific tags will be affected.</li>\n<li>Layermask: Objects with specific layers will be affected.</li>\n<li>Physics Materials: Objects with certain physical properties will be affected.</li>\n<li>Bounds: Any objects within a defined boundary or area will be targeted.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>For each of these targets, you can choose whether it should be affected or not.</p>\n</blockquote>\n<blockquote>\n<p><mark>Example:</mark> you can select Layermask target and select \"everything\". All object in bounds of Gravity2D component will be affected</p>\n</blockquote>\n<h2 id=\"id23\"><strong>TOOLS</strong></h2>\n<blockquote>\n<p>TOOLS section offers several tools and toggles to help visualize and monitor the Gravity2D . Great for diagnosing and improving your gravity setups in Unity. By visualizing forces, colliders, and raycast hits, you can quickly see what’s working, spot issues, and make necessary adjustments for smoother gameplay.</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th><mark>Gizmos</mark></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-csharptext\">See Affected Colliders</code></td>\n<td>See currently affected Colliders.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Gravity 2D Gizmo</code></td>\n<td>Visualize various forces, vectors, and zones in the scene view.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><mark>Colliders</mark></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-csharptext\">Debug Affected Colliders count</code></td>\n<td>colliders count.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Layermask for colliders</code></td>\n<td>Choose LayerMask of affected colliders.</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><mark>Action Handlers</mark></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-csharptext\">Enable Events</code></td>\n<td>Enable Events for Gravity 2D.</td>\n</tr>\n<tr>\n<td><code class=\"language-csharptext\">Enable Send Message</code></td>\n<td>Enable Send Message for Gravity 2D.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharpcsharp\"><code class=\"language-csharpcsharp\"><span class=\"token comment\">// ✅ Enable Events Example</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">LimitlessGravity2D</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GravityEventExample</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Awake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Subscribe to the Gravity2D global event</span>\n        Gravity2D<span class=\"token punctuation\">.</span>OnApplyGravity2DEvent <span class=\"token operator\">+=</span> OnGravityApplied<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Always unsubscribe to avoid memory leaks</span>\n        Gravity2D<span class=\"token punctuation\">.</span>OnApplyGravity2DEvent <span class=\"token operator\">-=</span> OnGravityApplied<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// This method will be called every time Gravity2D applies force</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnGravityApplied</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Gravity2D</span> gravity<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Rigidbody2D</span> rigid<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collider2D</span> coll<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"🌟 Gravity2D Event Triggered!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharpcsharp\"><code class=\"language-csharpcsharp\"><span class=\"token comment\">// ✅ Enable Send Message Example</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">LimitlessGravity2D</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GravitySendMessageExample</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This method will be called automatically if SendMessage is enabled</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnApplyGravity2D_SendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Gravity2D</span> gravity<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"📩 Gravity2D SendMessage Received!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>🛠 <strong>Note:</strong> To use <code class=\"language-csharptext\">SendMessage</code>, make sure the <code class=\"language-csharptext\">Send Message</code> toggle is enabled in the Gravity2D component’s <strong>Tools</strong> tab.</p>\n</blockquote>\n<hr>\n<h2 id=\"id3\"><strong>Helpers : </strong></h2>\n<hr>\n<h4 style=\"text-align:center\"><strong><mark>Gravity2D Aligner</mark></strong></h4>\n<img src=\"https://github.com/LimitlessDevelopment/example_gifs/blob/main/Screenshot%202025-04-09%20191853.png?raw=true\" height=\"250\" width = \"500\">\n<p>Used to align a Rigidbody2D in a specific direction relative to a Gravity2D force. It aligns objects to a gravitational field direction, simulating the effect of aligning to an invisible force.</p>\n<img src=\"https://github.com/LimitlessDevelopment/example_gifs/blob/main/aligner_gif.gif?raw=true\" height=\"250\" width = \"500\">\n<h4 style=\"text-align:center\"><strong><mark>Gravity2D AutoSize Helper</mark></strong></h4>\n<p><img src=\"https://github.com/LimitlessDevelopment/example_gifs/blob/main/Screenshot%202024-10-07%20152115.png?raw=true\" alt=\"Sonny and Mariel high fiving.\"></p>\n<p>Dynamically adjusts the size of a Gravity2D component based on raycasts or circlecasts to detect nearby objects. The script calculates the distance from the object to the hit point and resizes the gravity field accordingly.</p>\n<img src=\"https://github.com/LimitlessDevelopment/example_gifs/blob/main/autosize_gif.gif?raw=true\" height=\"250\" width = \"500\">\n<h4 style=\"text-align:center\"><strong><mark>Zero Gravity2D Helper</mark></strong></h4>\n<p><img src=\"https://github.com/LimitlessDevelopment/example_gifs/blob/main/Screenshot%202025-04-09%20192127.png?raw=true\" alt=\"Sonny and Mariel high fiving.\"></p>\n<p>Provides functionality for applying a zero-gravity effect to a Rigidbody2D. It is intended to nullify the effects of gravity for a specified duration.</p>\n<hr>\n<h2 id=\"id4\"><strong>Triggers : </strong></h2>\n<hr>\n<h4 style=\"text-align:center\"><strong><mark>Gravity2D Hover Trigger</mark></strong></h4>\n<p><img src=\"https://github.com/LimitlessDevelopment/example_gifs/blob/main/Screenshot%202024-10-07%20161850.png?raw=true\" alt=\"Sonny and Mariel high fiving.\"></p>\n<p>Used to detect when objects enter or leave a defined 2D trigger zone. Depending on the form (Box, Sphere, Raycast), it invokes Unity Events when objects interact with the trigger. The detection range and layer mask are customizable, allowing for flexible interaction setups.</p>\n<h4 style=\"text-align:center\"><strong><mark>Input Event Trigger</mark></strong></h4>\n<p><img src=\"https://github.com/LimitlessDevelopment/example_gifs/blob/main/Screenshot%202024-10-07%20114612.png?raw=true\" alt=\"Sonny and Mariel high fiving.\"></p>\n<p>Helps you to create responsive input-based events. By defining different key press types (Down, Up, Press), you can trigger specific Unity Events for each type of input. Additionally, it provides idle detection and visual debugging through gizmos, making it easier to monitor key event interactions.</p>\n<hr>\n<h2 id=\"id5\"><strong>Example Scenes : </strong></h2>\n<hr>\n<h4 style=\"text-align:center\"><strong><mark>Force Alignment Example Scene</mark></strong></h4>\n<p align=\"center\">\n<img src=\"https://github.com/LimitlessDevelopment/example_gifs/blob/main/aligner_gif.gif?raw=true\" height=\"250\" width = \"500\">\n</p>\n<p><em><a href=\"https://limitless-development.itch.io/force-alignment\">Online Demo</a></em></p>\n<h4>This scene showcases the functionality of the Gravity 2D Aligner component in action. <br/>It allows you to control the alignment of objects dynamically using GUI buttons, which adjust the alignment direction based on button clicks.</h4>\n<ul>\n<li>Gravity 2D Aligner:</li>\n</ul>\n<blockquote>\n<p>The Alignment direction is modified using the GUI buttons, which correspond to the following:</p>\n<ul>\n<li>Up: (AlignmentDirectionInt = 0)</li>\n<li>Down: (AlignmentDirectionInt = 1)</li>\n<li>Left: (AlignmentDirectionInt = 2)</li>\n<li>Right: (AlignmentDirectionInt = 3)</li>\n</ul>\n</blockquote>\n<ul>\n<li>Gravity2D Component:</li>\n</ul>\n<blockquote>\n<ul>\n<li>Force Position:<br/></li>\n</ul>\n<p>The Gravity2D component is set to force positions based on the closest colliders, using a Tilemap Collider 2D for interaction.</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>Height Offset:<br/></li>\n</ul>\n<p>A Height Offset value of 2 is used to keep the object (e.g., a ship) floating slightly above the surface, giving a natural hovering effect.</p>\n</blockquote>\n<hr>\n<h4 style=\"text-align:center\"><strong><mark>JetRace Example Scene</mark></strong></h4>\n<p align=\"center\"> <img src=\"https://github.com/LimitlessDevelopment/example_gifs/blob/main/jetrace_scene_gif.gif?raw=true\" height=\"250\" width = \"500\"> </p>\n<p><em><a href=\"https://limitless-development.itch.io/jet-race-demo-limitless-gravity-2d\">Online Demo</a></em></p>\n<h4>In this scene, you have the ability to control a spaceship in a 2D environment using intuitive keyboard controls. The ship hovers over a 2D tilemap.</h4>\n<h4>Controls:</h4>\n<blockquote>\n<ul>\n<li>W/S: Move Forward / Back.</li>\n<li>A/D: Tilt the spaceship left or right.</li>\n</ul>\n</blockquote>\n<h4>Ship Movement:</h4>\n<ul>\n<li>Gravity 2D Component</li>\n</ul>\n<blockquote>\n<ul>\n<li>The ship's movement is powered by a Gravity 2D component attached to the MovementForce game object. This force directly affects the hover colliders, which are attached to the ShipBody.</li>\n</ul>\n</blockquote>\n<ul>\n<li>Tilting Mechanism</li>\n</ul>\n<blockquote>\n<ul>\n<li>Left and right tilting is achieved through Torque applied to the ship. Two additional game objects, Torque and Torque 1, are equipped with Gravity 2D components that control the rotational movement of the spaceship.</li>\n</ul>\n</blockquote>\n<ul>\n<li>Hover Mechanism</li>\n</ul>\n<blockquote>\n<ul>\n<li>The ship’s hovering capability is based on 'Gravity Component' GameObject with Gravity 2D Component attached, affecting the colliders, creating a balanced and smooth hovering effect.</li>\n</ul>\n</blockquote>\n<ul>\n<li>Input Event Trigger</li>\n</ul>\n<blockquote>\n<ul>\n<li>The Input Event Trigger component is used to manage the ship's movement, tilting, as well as other elements like particle effects and lighting. This adds depth and realism to the scene by responding to various input events.</li>\n</ul>\n</blockquote>\n<h4>Experiment with the controls and observe how different components work together to create an immersive experience!</h4>\n<hr>\n<h4 style=\"text-align:center\"><strong><mark>Planets Orbital Example Scene</mark></strong></h4>\n<p align=\"center\"><img src=\"https://github.com/LimitlessDevelopment/example_gifs/blob/main/PlanetsOrbital_scene_gif.gif?raw=true\" height=\"250\" width = \"500\"></p>\n<p><em><a href=\"https://limitless-development.itch.io/orbit-planets\">Online Demo</a></em></p>\n<h4>This scene showcases how effortlessly you can simulate Newton's gravitational attraction effect using the Gravity 2D component in Unity.</h4>\n<ul>\n<li>The Sun:</li>\n</ul>\n<blockquote>\n<ul>\n<li>Acts as the central gravitational force. It attracts nearby asteroids, pulling them into orbit or collision paths depending on their trajectory.</li>\n</ul>\n</blockquote>\n<ul>\n<li>The Asteroids:</li>\n</ul>\n<blockquote>\n<ul>\n<li>Initially, the asteroids are given a push using a simple script called Planetoid Pusher 2D on \"GameManager\" gameObject, which imparts an initial force to set them in motion.</li>\n</ul>\n</blockquote>\n<p><br/>Once in motion, they are affected by the gravitational pull of the sun, mimicking real-world gravitational attraction.</p>\n<hr>\n<h4 style=\"text-align:center\"><strong><mark>Platformer 2D Example Scene</mark></strong></h4>\n<p align=\"center\"><img src=\"https://github.com/LimitlessDevelopment/example_gifs/blob/main/Platformer2D_scene_gif.gif?raw=true\" height=\"250\" width = \"500\"></p>\n<p><em><a href=\"https://limitless-development.itch.io/2d-platformer-demo\">Online Demo</a></em></p>\n<h4>This scene demonstrates a simple 2D platformer where the player can walk on walls in all directions, thanks to the Gravity 2D component.</h4>\n<ul>\n<li>\n<p>Gravity 2D Component allows the player to walk on walls and ceilings by dynamically altering the gravity direction, pulling the player toward various surfaces, not just the ground. This adds a unique platforming experience, allowing for vertical and even upside-down gameplay.</p>\n</li>\n<li>\n<p>The player is controlled using a custom Player Movement Platformer script. This script takes full advantage of the Gravity 2D component, allowing for smooth transitions between surfaces, regardless of orientation</p>\n</li>\n<li>\n<p>A large number of Box Collider 2D elements are used to represent platforms, walls, and ceilings. These colliders act as surfaces for the player to walk on in any direction, using the Gravity 2D system.</p>\n</li>\n</ul>\n<hr>\n<h4 style=\"text-align:center\"><strong><mark>Robot Example Scene</mark></strong></h4>\n<p align=\"center\"><img src=\"https://github.com/LimitlessDevelopment/example_gifs/blob/main/RobotExample_scene_gif.gif?raw=true\" height=\"250\" width = \"500\"></p>\n<p><em><a href=\"https://limitless-development.itch.io/robot-demolimitless-gravity-2d\">Online Demo</a></em></p>\n<h4>This example scene demonstrates two distinct mechanics powered by the Gravity2D system: Movement Controller and Gravity Gun. Each showcases how flexible and powerful Gravity2D can be for creating responsive, physics-based gameplay in 2D.</h4>\n<p>🚀 1. Movement Controller</p>\n<p>Instead of traditional movement scripts, the robot moves using pure gravity manipulation.</p>\n<ul>\n<li>\n<p>The Player Movement GameObject (a child of Player Body) contains:</p>\n<ul>\n<li>\n<p>A Gravity2D Component – applies directional force to the player body.</p>\n</li>\n<li>\n<p>An Input Event Trigger – adjusts the force based on keyboard input.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>The player's body is the target of the Gravity2D component. Movement is controlled by modifying the force amount:</p>\n<ul>\n<li>\n<p>When idle: Gravity force = 0</p>\n</li>\n<li>\n<p>Pressing D: Force = +200 (moves right)</p>\n</li>\n<li>\n<p>Pressing A: Force = -200 (moves left)</p>\n</li>\n</ul>\n<p>This setup allows the robot to glide smoothly through the scene without directly manipulating velocity — the force simulates a propulsion system, making movement feel organic and physics-driven.</p>\n<p>💥 2. Gravity Gun</p>\n<p>The Gravity Gun allows the robot to push and manipulate objects at a distance using targeted gravitational force.</p>\n<p>The system consists of three key GameObjects:</p>\n<ol>\n<li>Trigger</li>\n</ol>\n<ul>\n<li>Uses a Gravity2D Hover Trigger to modify forces when an object enters the trigger zone.</li>\n</ul>\n<ol start=\"2\">\n<li>Gravitation Box</li>\n</ol>\n<ul>\n<li>Contains a Gravity2D component that, when enabled, pulls in nearby objects and holds them in place using position-based gravity.</li>\n</ul>\n<ol start=\"3\">\n<li>Gravity Gun</li>\n</ol>\n<ul>\n<li>Uses a Gravity2D component in Raycast mode to apply directional force to objects — pushing them away like a short gravity burst.</li>\n</ul>\n<p>All of these are controlled by the Input Event Trigger on the Player Arm:</p>\n<ul>\n<li>\n<p>On Mouse Down:</p>\n<ul>\n<li>\n<p>Temporarily disables the Trigger and Gravitation Box for 0.02 seconds.</p>\n</li>\n<li>\n<p>Activates the Gravity Gun for 0.02 seconds, creating a sharp impulse that repels objects in its path.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>This precise timing simulates a controlled gravity pulse — ideal for physics puzzles, object launching, or combat interactions.</p>\n<p>These two systems combined create a seamless, physics-based control and interaction model, demonstrating the versatility of the Gravity2D framework in a real game environment.</p>\n<hr>\n<h4 style=\"text-align:center\"><strong><mark>Gravity 2D Playground Demo</mark></strong></h4>\n<p align=\"center\"><img src=\"https://github.com/LimitlessDevelopment/example_gifs/blob/main/playground_demo.gif?raw=true\" height=\"250\" width = \"500\"></p>\n<p><em><a href=\"https://limitless-development.itch.io/limitless-gravity-2d-playground-demo\">Online Demo</a></em></p>\n<ul>\n<li>The Playground scene is an interactive sandbox for trying out the various modes of the Limitless Gravity2D system.</li>\n</ul>\n<hr>\n<hr>\n<h2 id=\"id6\"><strong>📘 Gravity2D Public API Documentation</strong></h2>\n<p>The <code class=\"language-csharptext\">Gravity2D</code> class provides a comprehensive set of methods to manipulate 2D gravitational effects in Unity. Below is a description of each <strong>public method</strong> to help you integrate and control Gravity2D behavior in your projects.</p>\n<hr>\n<h3>⚙️ Gravity2D Behavior Modifiers</h3>\n<h4><code class=\"language-csharptext\">void ChangeGravityForceDirection(float dirForce, float dirForce1)</code></h4>\n<p>Changes the force direction depending on the current value of <code class=\"language-csharptext\">ForceAmount</code>.</p>\n<h4><code class=\"language-csharptext\">void ChangeForceAmount(float amount)</code></h4>\n<p>Updates the <code class=\"language-csharptext\">ForceAmount</code> value in real time.</p>\n<h4><code class=\"language-csharptext\">void ChangeHeightOffset(float heightOffset)</code></h4>\n<p>Updates the vertical offset used for applying gravity when set to nearest-collider mode.</p>\n<h4><code class=\"language-csharptext\">void ChangeAffectedColliders(float value)</code></h4>\n<p>Sets the limit on how many colliders can be affected simultaneously.</p>\n<hr>\n<h3>🔁 Runtime Configuration Helpers</h3>\n<h4><code class=\"language-csharptext\">void ChangeForceType(int index)</code></h4>\n<p>Switches between different force types using an integer index:</p>\n<ul>\n<li>0: ForceTorque</li>\n<li>1: Force</li>\n<li>2: Torque</li>\n<li>3: GravitationalAttraction</li>\n<li>4: Velocity</li>\n<li>5: AngularVelocity</li>\n</ul>\n<h4><code class=\"language-csharptext\">void ChangeForcePosition(int index)</code></h4>\n<p>Switches between different force position sources:</p>\n<ul>\n<li>0: This Transform</li>\n<li>1: Nearest Collider</li>\n</ul>\n<hr>\n<h3>🧩 Object Management</h3>\n<h4><code class=\"language-csharptext\">List&lt;Rigidbody2D> GetCurrentlyAffectedRigidbodies()</code></h4>\n<p>Returns the current list of Rigidbody2D objects affected by this Gravity2D instance.</p>\n<h4><code class=\"language-csharptext\">void RemoveAffectedObject(Rigidbody2D rigidbody)</code></h4>\n<p>Removes a Rigidbody2D from the list of objects being affected by gravity.</p>\n<h4><code class=\"language-csharptext\">void ReAddAffectedObject(Rigidbody2D rigidbody)</code></h4>\n<p>Adds a Rigidbody2D back into the list of affected objects.</p>\n<hr>\n<h3>⏱️ Timed Triggers (Coroutine Helpers)</h3>\n<h4><code class=\"language-csharptext\">void EnableOnce(float time)</code></h4>\n<p>Enables gravity for <code class=\"language-csharptext\">time</code> seconds, then disables it. (Uses internal coroutine)</p>\n<h4><code class=\"language-csharptext\">void DisableOnce(float time)</code></h4>\n<p>Disables gravity for <code class=\"language-csharptext\">time</code> seconds, then re-enables it. (Uses internal coroutine)</p>\n<hr>\n<h3>⚙️ Gravity2DHoverTrigger Behavior Modifiers</h3>\n<hr>\n<h3>⏱️ Timed Triggers (Coroutine Helpers)</h3>\n<h4><code class=\"language-csharptext\">void EnableOnce(float time)</code></h4>\n<p>Enables gravity for <code class=\"language-csharptext\">time</code> seconds, then disables it. (Uses internal coroutine)</p>\n<h4><code class=\"language-csharptext\">void DisableOnce(float time)</code></h4>\n<p>Disables gravity for <code class=\"language-csharptext\">time</code> seconds, then re-enables it. (Uses internal coroutine)</p>","frontmatter":{"path":"/Limitless Gravity 2D Documentation","date":"2019-08-01","title":"Limitless Gravity 2D Documentation","backgroundCol":"#978e86"}}},"pageContext":{"pathSlug":"/Limitless Gravity 2D Documentation"}},"staticQueryHashes":["1830426702"],"slicesMap":{}}